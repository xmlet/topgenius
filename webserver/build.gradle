/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4/userguide/tutorial_java_projects.html
 */

plugins {
  id "org.sonarqube" version "2.7"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

// Apply the JaCoCo plugin to calculate code coverage
apply plugin: 'jacoco'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from(configurations.runtimeClasspath)
}

stage.dependsOn(copyToLib)

task copyReactToLib(type: Copy) {
    into "$buildDir/libs"
    from(project(':reactjs').packageTopgeniusReact.archivePath)
}

copyReactToLib.dependsOn(project(':reactjs').packageTopgeniusReact)
stage.dependsOn(copyReactToLib)

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    sourceSets sourceSets.main

    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

codeCoverageReport.dependsOn(test)

dependencies {
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.25'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'io.vertx:vertx-web-templ-handlebars:3.7.1'
    implementation 'io.vertx:vertx-web:3.7.1'
    implementation 'com.github.xmlet:htmlflow:3.2'

    // runtimeOnly project(':reactjs')

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'com.github.javasync:AsyncFileRw:1.1.2'
}

// Define the main class for the application
mainClassName = 'org.htmlflow.samples.topgenius.WebApp'
def reactFilename = project(':reactjs').packageTopgeniusReact.archiveFileName.get()

jar {
  manifest {
    attributes(
      'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ') + ' ' + reactFilename,
      'Main-Class': mainClassName
    )
  }
  archiveBaseName = 'topgenius'
  archiveVersion = '1.0'
  archiveExtension = 'jar'
}